function configRouter(n,t){t.otherwise("/"),n.state("manga",{url:"/manga",templateUrl:"admin-site/scripts/components/manga/MangaView.html",controller:"MangaController"})}function configNotification(n){n.setOptions({delay:2e3,startTop:20,startRight:10,verticalSpacing:20,horizontalSpacing:20,positionX:"center",positionY:"top"})}function configBlockUI(n){n.message="Loading..",n.delay=100,n.autoBlock=!1}var AdminApp=angular.module("AdminApp",["ui.router","datatables","ui.bootstrap","ui.select","ui-notification","blockUI"]).config(configRouter).config(configNotification).config(configBlockUI);configRouter.$inject=["$stateProvider","$urlRouterProvider"],configNotification.$inject=["NotificationProvider"],configBlockUI.$inject=["blockUIConfig"];var Config=function(){return{apiDomain:"http://manga-backend.local/"}}();!function(){function n(n,t,e){function o(n,t){return this.send("GET",n,t)}function a(n,t){return this.send("POST",n,t)}function i(e,o,a){var i=t.defer(),r={method:e,url:o,timeout:i.promise,headers:{"Content-Type":"application/x-www-form-urlencoded"},transformRequest:function(n){var t=[];for(var e in n)t.push(encodeURIComponent(e)+"="+encodeURIComponent(n[e]));return t.join("&")}};return"POST"==e.toUpperCase()?r.data=a:"GET"==e.toUpperCase()&&(r.params=a),n(r).then(function(n){return i.resolve(n.data)}).catch(function(n){return i.reject(n)}),i.promise.abort=function(){i.resolve()},i.promise}var r={get:o,post:a,send:i};return r}angular.module("AdminApp").factory("Request",n),n.$inject=["$http","$q","$window"]}(),function(){angular.module("AdminApp").filter("propsFilter",function(){return function(n,t){var e=[];if(angular.isArray(n)){var o=Object.keys(t);n.forEach(function(n){for(var a=!1,i=0;i<o.length;i++){var r=o[i],c=t[r].toLowerCase();if(n[r].toString().toLowerCase().indexOf(c)!==-1){a=!0;break}}a&&e.push(n)})}else e=n;return e}})}(),function(){function n(n,t,e,o,a,i,r,c){function u(n){a.initGrid(n)}function l(){var o=c.instances.get("createMangaBlock"),a=e.find(".manga-grid");v=t.open({templateUrl:"createMangaModal.html",scope:n,size:"lg",appendTo:a}),o.start(),i.getTags().then(function(t){return 0==t.status?(v.dismiss(),void r.error("Internal error")):(n.tags=t.tags,void o.stop())})}function s(){}function f(){v.dismiss()}function d(o){C=o;var a=e.find(".manga-grid");h=t.open({templateUrl:"editMangaModal.html",scope:n,appendTo:a})}function g(){console.log("update"+C)}function p(){h.dismiss()}function m(n){console.log("remove")}var v,h,C;n.tags=[],n.selectedTags=[],n.openEditManga=d,n.removeManga=m,n.updateManga=g,n.closeEditManga=p,n.openCreateManga=l,n.closeCreateManga=f,n.addManga=s,u(n)}angular.module("AdminApp").controller("MangaController",n),n.$inject=["$scope","$uibModal","$document","MangaService","MangaGrid","TagService","Notification","blockUI"]}(),function(){function n(n,t,e,o,a){function i(n){n.dtOptions=e.newOptions().withOption("ajax",{url:u,type:"GET",data:function(n,t){n.offset=n.start,n.limit=n.length,n.search=n.search.value,n.column=n.order[0].column,n.order=n.order[0].dir}}).withDataProp("data").withOption("serverSide",!0).withPaginationType("simple_numbers").withOption("drawCallback",c.bind(null,n)),n.dtColumns=[o.newColumn("manga_name"),o.newColumn("slug"),o.newColumn("view_count"),o.newColumn("like_count"),o.newColumn("id")],n.dtColumnDefs=[a.newColumnDef(0),a.newColumnDef(1).notSortable(),a.newColumnDef(2).notSortable(),a.newColumnDef(3).notSortable(),a.newColumnDef(4).notSortable().withOption("width","20%").renderWith(function(n,t,e){return r(n)})]}function r(n){var t='<div class="action"><button type="button" class="btn btn-primary update" ng-click="openEditManga('+n+')">Edit</button> <button type="button" class="btn btn-danger remove"  ng-click="removeManga('+n+')">Remove</button></div>';return t}function c(t,e){var o=angular.element(".action");angular.forEach(o,function(e){var o=n(angular.element(e).html())(t);angular.element(e).html(o)})}var u=Config.apiDomain+"mangas",l={initGrid:i};return l}angular.module("AdminApp").factory("MangaGrid",n),n.$inject=["$compile","MangaService","DTOptionsBuilder","DTColumnBuilder","DTColumnDefBuilder"]}(),function(){function n(){function n(){console.log("get from sv")}var t={get:n};return t}angular.module("AdminApp").factory("MangaService",n),n.$inject=[]}(),function(){function n(n){function t(){return n.send("GET",e)}var e=Config.apiDomain+"tags",o={getTags:t};return o}angular.module("AdminApp").factory("TagService",n),n.$inject=["Request"]}();
//# sourceMappingURL=data:application/json;base64,
